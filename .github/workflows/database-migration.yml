name: Database Migration

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to run migration on'
        required: true
        type: choice
        options:
          - demo
          - staging
          - prod
      migration_type:
        description: 'Type of migration'
        required: true
        type: choice
        options:
          - init
          - reset
          - specific-module
      module:
        description: 'Specific module (if migration_type is specific-module)'
        required: false
        type: choice
        options:
          - membership
          - attendance
          - content
          - giving
          - messaging
          - doing

jobs:
  validate-migration:
    name: Validate Migration Request
    runs-on: ubuntu-latest
    
    steps:
      - name: Validate inputs
        run: |
          echo "Environment: ${{ github.event.inputs.environment }}"
          echo "Migration Type: ${{ github.event.inputs.migration_type }}"
          echo "Module: ${{ github.event.inputs.module }}"
          
          if [[ "${{ github.event.inputs.migration_type }}" == "specific-module" && -z "${{ github.event.inputs.module }}" ]]; then
            echo "‚ùå Module must be specified for specific-module migration"
            exit 1
          fi
          
          echo "‚úÖ Migration request validated"

  run-migration:
    name: Run Database Migration
    needs: validate-migration
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets[format('{0}_AWS_ACCESS_KEY_ID', github.event.inputs.environment == 'prod' && 'AWS' || 'STAGING')] }}
          aws-secret-access-key: ${{ secrets[format('{0}_AWS_SECRET_ACCESS_KEY', github.event.inputs.environment == 'prod' && 'AWS' || 'STAGING')] }}
          aws-region: us-east-2

      - name: Install dependencies
        run: npm ci

      - name: Run database migration
        env:
          ENVIRONMENT: ${{ github.event.inputs.environment }}
        run: |
          case "${{ github.event.inputs.migration_type }}" in
            "init")
              echo "üîß Running database initialization..."
              npm run initdb
              ;;
            "reset")
              echo "üîÑ Running database reset..."
              npm run reset-db
              ;;
            "specific-module")
              echo "üîß Running migration for module: ${{ github.event.inputs.module }}"
              npm run initdb:${{ github.event.inputs.module }}
              ;;
            *)
              echo "‚ùå Unknown migration type: ${{ github.event.inputs.migration_type }}"
              exit 1
              ;;
          esac
          
          echo "‚úÖ Database migration completed successfully"

      - name: Verify migration
        run: |
          echo "üîç Verifying database migration..."
          # Add verification steps here
          echo "Migration verification completed"

  notify-migration:
    name: Notify Migration Status
    needs: run-migration
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: Notify migration status
        uses: 8398a7/action-slack@v3
        if: env.SLACK_WEBHOOK_URL != ''
        with:
          status: ${{ job.status }}
          channel: '#database-ops'
          text: |
            Database Migration: ${{ job.status }}
            Environment: ${{ github.event.inputs.environment }}
            Type: ${{ github.event.inputs.migration_type }}
            Module: ${{ github.event.inputs.module || 'All' }}
            Actor: ${{ github.actor }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}