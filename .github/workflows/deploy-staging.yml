name: Deploy Staging

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  SERVERLESS_ACCESS_KEY: ${{ secrets.STAGING_AWS_ACCESS_KEY_ID }}

jobs:
  deploy:
    name: Deploy Staging
    runs-on: ubuntu-latest
    environment: staging
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Cache npm dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.STAGING_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.STAGING_AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-2

      - name: Install dependencies
        run: npm ci

      - name: Run comprehensive tests
        run: |
          npm run lint:check
          npm run tsc
          # Note: Integration tests would run here if available
          # npm test

      - name: Build application
        run: npm run build

      - name: Prepare Lambda Layer
        run: npm run build-layer

      - name: Run security checks
        run: |
          npm audit --audit-level=moderate
        continue-on-error: true

      - name: Deploy Core APIs to Staging
        run: npx serverless deploy --stage staging --verbose

      - name: Verify deployment
        run: |
          echo "Deployment completed for Staging environment"
          npx serverless info --stage staging

      - name: Package deployment artifacts
        run: |
          npx serverless package --stage staging
          ls -R .serverless

  integration-tests:
    name: Integration Tests
    needs: deploy
    runs-on: ubuntu-latest
    environment: staging
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Wait for deployment to be ready
        run: sleep 60

      - name: Run API integration tests
        env:
          TEST_API_URL: https://api-staging.churchapps.org
          TEST_ENVIRONMENT: staging
        run: |
          echo "Running integration tests against staging API..."
          
          # Test health endpoint
          echo "Testing health endpoint..."
          curl -f $TEST_API_URL/health
          
          # Test module endpoints
          echo "Testing module endpoints..."
          curl -f $TEST_API_URL/membership/churches
          curl -f $TEST_API_URL/attendance/campuses  
          curl -f $TEST_API_URL/content/pages
          curl -f $TEST_API_URL/giving/funds
          curl -f $TEST_API_URL/messaging/conversations
          curl -f $TEST_API_URL/doing/tasks
          
          echo "Integration tests completed successfully"

  performance-tests:
    name: Performance Tests
    needs: deploy
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Run load tests
        run: |
          echo "Running basic load tests..."
          # Install artillery or similar tool for load testing
          npx artillery quick --count 10 --num 5 https://api-staging.churchapps.org/health
          echo "Load tests completed"

  notify:
    name: Notify Deployment
    needs: [deploy, integration-tests]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: Notify deployment status
        uses: 8398a7/action-slack@v3
        if: env.SLACK_WEBHOOK_URL != ''
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          text: |
            Core APIs Staging Deployment: ${{ job.status }}
            Environment: Staging
            Commit: ${{ github.sha }}
            Actor: ${{ github.actor }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}